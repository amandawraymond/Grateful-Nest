= README

== About This Project

A starter kit for creating applications using the Postgres, Rails and Angular
stack, with the following features built-in:

1. Ruby 2.1.2, Rails ~4.2, Angular ~1.2
1. Postgres support
1. Complete user management
1. Front-end asset management using Bower
1. Routing using Angular
1. Back-end testing using RSpec
1. Ready-to-deploy on Heroku

Several ideas have been taken from:
* http://angular-rails.com

== Setting Up

Pre-requisites: You must have Node, Bower and Ruby installed.

1. Download or clone this repo
1. Run the following commands in the application's root directory:

    $ bundle install

   This should set up all the gems required. Note: Installing the pg gem can be a
   pain. See http://stackoverflow.com/questions/19262312/installing-pg-gem-failure-to-build-native-extension
   for help.

    $ rake bower:install

   This should set up all the front-end assets required.

1. Create a database named 'rails-app-starter-kit_development', er edit
   /config/database.yml to suit your needs.

1. run the following command:

    $ rake db:migrate

   This will set up the required tables in the database.

== Coding Style Conventions

=== General

1. Lines are kept within 80 characters
1. 2 spaces are used as tabs, with 4 spaces for continuation

=== Comments

1. Comments are compatible with RDoc. See
   http://docs.seattlerb.org/rdoc/RDoc/Markup.html for markup reference.

1. General Rules
   1. Single-line-single-sentence comments do not end with a full-stop
   1. Multiple-line or multiple-sentence comments end with a full-stop
   1. All comments are in sentence case

== App Structure

The application structure is similar to a standard Rails app, with just the
following additions:

  app
   |- assets
       |- javascripts
           |- angular (contains all Angular code)
               |- app.js (the 'entry point' for Angular)
               |- controllers
               |- directives
                   :
                   :

  specs (contains all tests)
   :
   :

  vendor
   |- assets
       |- bower_components (all front-end components mananged by Bower)
           :
           :

We have also created some 'Hello World' code, which you can modify/remove to
suit your needs. This code can be found in:

* config/routes.rb (look for "root 'home#index'")
* app/controllers/home_controller.rb
* app/views/home/index.html.erb
* app/javascripts/angular/controllers/home_ctrl.js

== Dev Tools

=== Rails Generators

Rails generators have been configured not to generate non-useful files such as
assets, helpers, views, or view specs. This is because we are using Angular as
our main MVC framework and not Rails.

=== Model Annotation

We use the 'annotate' gem to add column information to models. Without this, it
is difficult to know at a glance the columns within a model table. Run this gem
generally after you run a migration, as follows:

  $ annotate --position before

=== Front-end Asset Management

Normally, Rails does asset management from within the (app/lib/vender)/assets
folders. However, because we are supporting very 'front-end heavy' applications,
we use Bower, which is the most widely used such tool. We use the 'bower-rails'
gem for this purpose. See the following for more information:
* http://bower.io/
* https://github.com/42dev/bower-rails

To add front-end libraries, edit the /bower.json file with the required library
and also remember to reference them in application.js and/or application.css.

=== Testing

We use RSpec (instead of the default TestUnit).
See the following for more information:
* https://github.com/rspec/rspec-rails
* http://rspec.info/

== Out-of-the-box Functionality

=== Authentication

Authentication is done via the 'devise' gem (see
https://github.com/plataformatec/devise).
Users are managed via the User model.
