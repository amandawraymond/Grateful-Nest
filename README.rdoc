= README

== About This Project

A starter kit for creating applications using the Postgres, Rails and Angular
stack, with the following features built-in:

1. Rails ~4.2, Angular ~1.2 (and we recommend Ruby >=2.1.2)
1. Postgres support
1. Complete user management, with authentication and role-based authorization
1. Front-end asset management using Bower
1. Angular-based routing
1. Angular interfacing with server CSRF protection and server form validation
1. Back-end testing using RSpec and other best practices
1. Ready-to-deploy on Heroku

Several ideas have been taken from http://angular-rails.com.

See Gemfile.lock for each gem's version. We recommend using these versions, or
newer, for best results.

== Setting Up

Pre-requisites: You must have Node, Bower and Ruby installed.

1. Download or clone this repo
1. Run the following commands in the application's root directory:

    $ bundle install

   This should set up all the gems required. Note: Installing the pg gem can be a
   pain. See http://stackoverflow.com/questions/19262312/installing-pg-gem-failure-to-build-native-extension
   for help.

    $ rake bower:install

   This should set up all the front-end assets required.

1. Create two databases named as follows, or edit /config/database.yml to suit
   your needs, and then create the appropriate databases:
   * 'rails-app-starter-kit_development' (for developing)
   * 'rails-app-starter-kit_test' (for testing)

1. run the following command:

    $ rake db:migrate

   This will set up the required tables in the database.

== App Structure

The application structure is similar to a standard Rails app, with certain
additions, a sampling of which is shown below:

  app
   |- assets
       |- javascripts
           |- angular (contains all Angular code)
               |- app.js (the 'entry point' for Angular)
               |- routes.js.erb
               |- controllers
               |- directives
               |- templates (contains all Angular templates, i.e. views)
   |- controllers
       |- home_controller.rb (the 'entry point' controller)
   |- policies (user authorization policies)
   |- views
       |- home
           |- index.html (the 'entry point' view)
  specs (contains all tests)
   |- support (utility stuff for testing)
  vendor
   |- assets
       |- bower_components (all front-end components mananged by Bower)

== Dev Tools

=== Rails Generators

Rails generators have been configured not to generate non-useful files such as
assets, helpers, views, or view specs. This is because we are using Angular as
our main MVC framework and not Rails.

=== Model Annotation

We use the 'annotate' gem to add column information to models. Without this, it
is difficult to know at a glance the columns within a model table. Run this gem
generally after you run a migration, as follows:

  $ annotate --position before

=== Front-end Asset Management

Normally, Rails does asset management from within the (app/lib/vender)/assets
folders. However, because we are supporting very 'front-end heavy' applications,
we use Bower, which is the most widely used such tool. We use the 'bower-rails'
gem for this purpose. See the following for more information:
* http://bower.io
* https://github.com/42dev/bower-rails

To add/remove front-end libraries, add-to/remove-from the /bower.json file the
required library/libraries. Then run:

  $ rake bower:install

Also remember to reference/de-reference the relevant files in application.js,
and/or application.css.

=== Testing

We use RSpec (instead of the default TestUnit) for back-end testing.
See the following for more information:
* https://github.com/rspec/rspec-rails
* http://rspec.info

We use FactoryGirl for creating real or mock objects required for testing.
See the following for more information:
* https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md
* https://github.com/thoughtbot/factory_girl_rails

For a detailed discussion, see the Testing section later on.

== Out-of-the-box Functionality

=== Authentication

Authentication is done via the 'devise' gem (see
https://github.com/plataformatec/devise). Users are stored in the 'User' model.

The entire devise workflow is, after weighing the pros and cons, deliberately
kept outside of the Angular. See
https://medium.com/opinionated-angularjs/techniques-for-authentication-in-angularjs-applications-7bbf0346acec
for a detailed discussion; note however that our implementation is different.
Relevant files in our implementation are:
* app/assets/javascripts/angular/directives/auth_links.js
* controllers/application_controller (the 'set_sign_in_redirect' method)
* All devise related files, of course

=== Authorization

Authorization is done via two gems:
* rolify[https://github.com/RolifyCommunity/rolify]: For assigning roles to
  users
* pundit[https://github.com/elabs/pundit]: For authorizing actions based on
  roles

Authorization policies are placed in app/policies.

=== Form Submission

Form validation should generally take place at the Angular end. However, this
may not always be possible, and you may choose to leave some validation
exclusively on the server-side.

We provide a clean integration between Angular form validation and server-side
form validation via the 'formErrors' directive. See
app/assets/javascripts/angular/directives/form_errors.js.

== Testing in Detail

Testing is a vast subject, best learnt from hands-on experience.
See the following for ideas on how to get started:
* https://github.com/howaboutwe/rspec-style-guide
* http://dhartweg.roon.io/rspec-testing-for-a-json-api

=== Mock Objects

Most tests require the use of real or mock objects against which tests can be
run. We use FactoryGirl and rspec-mocks for creating such objects. Each has its
advantages, and when to choose which is beautifully explained here:
http://www.agileventures.org/articles/testing-with-rspec-stubs-mocks-factories-what-to-choose.

=== User Authentication

Many controller tests require a user (possibly having certain roles) to be
signed in. We have provided integration with devise for easy authentication.
See the following for more information:
* spec/factories/user.rb
* spec/support/controller_macros.rb

=== Authorization Policy Testing

We provide an easy way to test authorization policies generated using pundit.
See spec/support/pundit_matcher.rb for relevant RSpec matchers.

Authorization policy tests are placed in spec/policies.

== Contributing/Using

=== Creating a CRUD Resource

1. Run:

    rails g resource Widget (substitute Widget with resource name)

   - or -

    rails g model Widget
    rails g controller Widgets

1. Edit the config/routes.rb file.
1. Write some model unit tests. For reference see:
   * spec/models/post_spec.rb
   * spec/factories/post.rb
1. Write some model functionality.
1. Create an authorization policy.For reference see
   app/policies/post_policy.rb.
1. Write some controller unit tests. For reference see
   spec/controllers/posts_controller_spec.rb.
1. Write some authorization polict tests. For reference see
   spec/policies/post_policy_spec.rb
1. Write some controller functionality.
1. Write the server views (which basically render out responses as JSON). For
   reference, see app/views/posts/index.json.jbuilder. JBuilder
   (https://github.com/rails/jbuilder) comes bundles with Rails, and is a much
   better way to create JSON, than using the 'as_json' method.
1. Create an Angular resource to communicate with the controller. See
   app/assets/javascripts/angular/services/post.js.
1. Create an Angular controller that uses the resource. For reference see
   app/assets/javascripts/angular/controllers/posts_ctrl.js.
1. Create an Angular view (template). For reference see
   app/assets/javascripts/angular/templates/controllers/posts/index.html.
1. Update the app/assets/javascripts/angular/routes.js file.

=== Coding Style Conventions

==== General

1. Lines are kept within 80 characters
1. 2 spaces are used as tabs, with 4 spaces for continuation

==== Comments

1. Comments are compatible with RDoc.

1. General Rules
   1. Single-line-single-sentence comments do not end with a full-stop
   1. Multiple-line or multiple-sentence comments end with a full-stop
   1. All comments are in sentence case

== Appendix

Contains everything that didn't fit in anywhere else on this README.

=== Useful Links

1. {RDoc Markup reference}[http://docs.seattlerb.org/rdoc/RDoc/Markup.html]
1. {HTTP codes and their Rails symbols}[https://github.com/rack/rack/blob/1.5.2/lib/rack/utils.rb#L544]
